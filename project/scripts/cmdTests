#!/usr/bin/env bash

set -eux

SBT="./project/scripts/sbt" # if run on CI
# SBT="sbt" # if run locally

SOURCE="tests/pos/HelloWorld.scala"
MAIN="HelloWorld"
EXPECTED_OUTPUT="hello world"
COMPILER_CP="compiler/target/scala-2.12/classes" # FIXME: This is not very reliable

# check that benchmarks can run
"$SBT" "dotty-bench/jmh:run 1 1 tests/pos/alias.scala"
"$SBT" "dotty-bench-bootstrapped/jmh:run 1 1 tests/pos/alias.scala"

OUT=$(mktemp -d)
OUT1=$(mktemp -d)
tmp=$(mktemp)

clear_out()
{
  local out="$1"
  rm -rf "$out/*"
}

# check that `sbt dotc` compiles and `sbt dotr` runs it
echo "testing sbt dotc and dotr"
"$SBT" ";dotc $SOURCE -d $OUT ;dotr -classpath $OUT $MAIN" > "$tmp"
grep -qe "$EXPECTED_OUTPUT" "$tmp"

# check that `sbt dotc` compiles and `sbt dotr` runs it
echo "testing sbt dotc -from-tasty and dotr -classpath"
clear_out "$OUT"
"$SBT" ";dotc $SOURCE -d $OUT ;dotc -from-tasty -classpath $OUT -d $OUT1 $MAIN ;dotr -classpath $OUT1 $MAIN" > "$tmp"
grep -qe "$EXPECTED_OUTPUT" "$tmp"

# check that `sbt dotc -decompile` runs
echo "testing sbt dotc -decompile"
"$SBT" ";dotc -decompile -color:never -classpath $OUT $MAIN" > "$tmp"
grep -qe "def main(args: scala.Array\[scala.Predef.String\]): scala.Unit =" "$tmp"

echo "testing sbt dotr with no -classpath"
clear_out "$OUT"
"$SBT" ";dotc $SOURCE ; dotr $MAIN" > "$tmp"
grep -qe "$EXPECTED_OUTPUT" "$tmp"

echo "testing loading tasty from .tasty file in jar"
clear_out "$OUT"
"$SBT" ";dotc -d $OUT/out.jar $SOURCE; dotc -decompile -classpath $OUT/out.jar -color:never $MAIN" > "$tmp"
grep -qe "def main(args: scala.Array\[scala.Predef.String\]): scala.Unit =" "$tmp"

## FIXME: test disabled because "-classpath $COMPILER_CP" is not enough to run
## the compiler, with this PR you also need the sbt compiler-interface jar and
## there's no easy way to add this here (maybe we should use `coursier fetch -p` ?)
#echo "testing scala.quoted.Expr.run from sbt dotr"
#"$SBT" ";dotty-compiler/compile ;dotc -classpath $COMPILER_CP tests/run-with-compiler/quote-run.scala; dotr -with-compiler Test" > "$tmp"
#grep -qe "val a: scala.Int = 3" "$tmp"


# setup for `dotc`/`dotr` script tests
"$SBT" dist-bootstrapped/pack

# check that `dotc` compiles and `dotr` runs it
echo "testing ./bin/dotc and ./bin/dotr"
clear_out "$OUT"
./bin/dotc "$SOURCE" -d "$OUT"
./bin/dotr -classpath "$OUT" "$MAIN" > "$tmp"
test "$EXPECTED_OUTPUT" = "$(cat "$tmp")"

# check that `dotc -from-tasty` compiles and `dotr` runs it
echo "testing ./bin/dotc -from-tasty and dotr -classpath"
clear_out "$OUT1"
./bin/dotc -from-tasty -classpath "$OUT" -d "$OUT1" "$MAIN"
./bin/dotr -classpath "$OUT1" "$MAIN" > "$tmp"
test "$EXPECTED_OUTPUT" = "$(cat "$tmp")"

# echo ":quit" | ./dist-bootstrapped/target/pack/bin/dotr  # not supported by CI

echo "testing ./bin/dotd"
clear_out "$OUT"
./bin/dotd -project Hello -siteroot "$OUT" "$SOURCE"

## Disabled because of flakeyness, should be changed to not depend on sbt
# echo "running Vulpix meta test"
# tmp=$(mktemp)
# if "$SBT" "dotty-compiler/testOnly dotty.tools.vulpix.VulpixMetaTests" > "$tmp" 2>&1; then
#   cat "$tmp"
#   echo "failed: sbt exited without error on VulpixMetaTests, these tests are expected to fail"
#   exit -1
# fi
# tmp1=$(mktemp)
# cat "$tmp" | sed '/Test run started/,$!d' > "$tmp1"
# set +x # Or the code below produces too much noise
# while read expected <&4 && read actual <&3; do
#   if [[ "$expected" != *"SKIP" ]]; then
#     if [ "$actual" != "$expected" ]; then
#       echo "failed Vulpix meta: the output of sbt differs from the expected output"
#       echo "expected : $expected"
#       echo "actual   : $actual"
#       exit -1
#     fi
#   fi
# done 3<"$tmp1" 4<"./tests/vulpix-tests/meta/sbt-output.check"
